class Solution {
    private ArrayList<Integer>ans;
    
    ArrayList<Integer> boundaryTraversal(Node node) {
        ans=new ArrayList<>();
        if(node==null){
            return ans;
        }
        if(node.left==null && node.right==null){
            ans.add(node.data);
            return ans;
        }
        ans.add(node.data);
        printLeftView(node);
        printLeaf(node);
       printRightView(node.right);
        return ans;
    }
    private void printLeftView(Node node){
        Node curr=node.left;
        while(curr!=null){
            if(curr.left!=null || curr.right!=null){
                ans.add(curr.data);
            }
            if(curr.left!=null){
                curr=curr.left;
            }else{
                curr=curr.right;
            }
        }
        
    }
    private void printRightView(Node node){
        Node curr=node;
        ArrayList<Integer>temp=new ArrayList<>();
        while(curr!=null){
            if(curr.left!=null || curr.right!=null){
                temp.add(curr.data);
            }
            if(curr.right!=null){
                curr=curr.right;
            }else{
                curr=curr.left;
            }
        }
        for(int i=temp.size()-1;i>=0;i--){
            ans.add(temp.get(i));
        }
    }
    private void printLeaf(Node node){
        if(node==null){
            return;
        }
        if(node.left==null && node.right==null){
            ans.add(node.data);
           // return;
        }
        printLeaf(node.left);
        printLeaf(node.right);
    }
}
